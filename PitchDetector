// This version accept signal from guitar over preAmp (AliExp: TL072) and outputs to MCP4725 DAC
// ESP32S3 (44pin) <-> MCP4725 = esp32s3 Dev Module
// pin: 4              SDA
// pin: 5              SCL
// pin: 3.3v           VCC 
// pin: GND            GND
// pin: 1 - analog input -> to guitar preamp
// 1117C pin: 4.65v to PreAmp

#include "arduinoFFT.h"
#include <Wire.h>
#include <Adafruit_MCP4725.h>

#define PIN_AUDIO_IN               1  // Analog Input-1-
#define I2C_SDA                    4  // SDA - GPIO4
#define I2C_SCL                    5  // SLC - GPIO5
#define SAMPLES                  256  // Need to be a square of 2-128
#define SAMPLING_FREQUENCY      3000 // Double of highest freq in range Hz -2400-
#define AMPLITUDE_THRESHOLD      200  // 50 Minimum amplitude to consider a valid pitch 250
#define BIT_RESOLUTION            12  // for 4096 levels of dac precision to start from
#define EXT_MPC4725_1           0x60  // 0x62 will use default CS address for MPC4725

unsigned int samplingPeriod;
unsigned long currentTime;

// These are the input and output vectors to receive computed results from FFT
float vReal[SAMPLES];
float vImag[SAMPLES];
int controlSignal  = 0;

const int freqRanges[][3] = {
  {1, 80, 84},  // E - 82.4
  {2, 85, 89},  // F - 87,3
  {3, 90, 94},  // F#- 92.5
  {4, 95, 100}, // G - 98
  {5, 101,106}, // G#- 103.8
  {6, 107,112}, // A - 110 
  {7, 113,119}, // A#- 116.5
  {8, 120,126}, // H - 123.4
  {9, 127,133}, // C - 130.5
  {10,136,143}, // c#- 139.6
  {11,144,150}, // D - 147.8
  {12,152,159}, // D#- 155,5
  {13,160,168}, // E - 164,8
  {14,170,178}, // F - 174,2
  {15,181,189}, // F#- 185
  {16,191,201}, // G - 196
  {17,202,212}, // G#- 207
  {18,215,225}, // A  -220
  {19,227,238}, // A# -233
  {20,240,252}, // H  -246
  {21,255,267}, // C  -261
  {22,271,283}, // C# -277
  {23,286,300}, // D  -293.3
  {24,303,218}, // D# -311
  {25,321,337}, // E  -329.6
  {26,340,357}, // F  -349,2
  {27,361,379}, // F# -370
  {28,382,401}, // G  -392
  {29,405,425}, // G# -415.3
  {30,429,451}, // A  -440
  {31,455,477}, // A# -466.2
  {32,482,505}, // H  -493.9
  {33,510,536}, // C  -523.2
  {34,541,568}, // C# -554,4
  {35,573,601}, // D  -587,3
  {36,606,637}, // D# -622,3
  {37,643,675}, // E  -659.3
  {38,681,715}, // F  -698,5
  {39,722,758}, // F# -740
  {40,765,803}, // G  -784
  {41,811,850}, // G# -830.6
  {42,858,902}, // A  -880
  {43,910,955}, // A# -932.3
  {44,964,1010},// H  -987
  {45,1020,1072}// C -1046  
};

// Create FFT object with weighing factor storage
ArduinoFFT<float> FFT = ArduinoFFT<float>(vReal, vImag, SAMPLES, SAMPLING_FREQUENCY, true);
Adafruit_MCP4725 dac;

void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);
  //
  if (!dac.begin(EXT_MPC4725_1)) {
    Serial.println("Failed to locate dac: MPC4725");
    while(1);
  }

  // activate attenuator to 0-3v, default 0-1.1v
  analogSetAttenuation(ADC_11db);
  samplingPeriod = round(1000000*(1.0/SAMPLING_FREQUENCY));
  analogReadResolution(BIT_RESOLUTION); // 12-bit resolution
}

void loop() {
  currentTime = micros(); 
  for (int i = 0; i < SAMPLES; i++) {
    vReal[i] = analogRead(PIN_AUDIO_IN);                   // A conversion takes about 1uS on an ESP32
    vImag[i] = 0;
    while (micros() - currentTime < samplingPeriod) {}      // wait time
    currentTime += samplingPeriod;
  }
  FFT.dcRemoval();
  FFT.windowing(FFTWindow::Hamming, FFTDirection::Forward);	// Weigh data
  FFT.compute(FFTDirection::Forward);                       // Compute FFT
  FFT.complexToMagnitude();                                 // Compute magnitudes
  float pitchFrequency = FFT.majorPeak(); 
  //Serial.println("FFT PitchF Frequency:"+String(pitchFrequency)); 

  // Find max aplitude for current samples
  double maxAmplitute = 0;
  for (int i=0; i < SAMPLES/2; i++) {
     if (vReal[i] > maxAmplitute) { maxAmplitute = vReal[i]; } // track the higheest value
  }

  // Filter only values over threshold
  if (maxAmplitute > AMPLITUDE_THRESHOLD) {
    controlSignal = map(pitchFrequency, 20, SAMPLING_FREQUENCY/2, 0, 4096); // Adjust ranges as needed
    //Serial.println("Pitch Frequency: " + String(pitchFrequency) + " mapped: " + String(controlSignal));
    // output to FV-1 POT0
    dac.setVoltage(controlSignal, false);
    //
    int value = FilterFreqValue(pitchFrequency);
    Serial.println(String(value)  + " " + String(pitchFrequency)); 
    // Serial.println(String(value));
    Serial.write(value); 

    // for stability
    delay(2);
  }
}

// 
int FilterFreqValue(float frequency) {
    for (int counter = 0; counter < 44; counter++) {
        if ( frequency >= freqRanges[counter][1] && frequency < freqRanges[counter][2] ) {
          return  freqRanges[counter][0];
        }
    }
    return 0;
}

