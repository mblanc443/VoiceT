// This version accept signal from guitar over preAmp (AliExp: TL072) and outputs to MCP4725 DAC
#include "arduinoFFT.h"
#include <Wire.h>
#include <Adafruit_MCP4725.h>

#define PIN_AUDIO_IN               1  // Analog Input
#define I2C_SDA                    4  // SDA - GPIO4
#define I2C_SCL                    5  // SLC - GPIO5
#define SAMPLES                  128  // Need to be a square of 2
#define SAMPLING_FREQUENCY      2400  // Double of highest freq in range Hz
#define AMPLITUDE_THRESHOLD      280  // 50 Minimum amplitude to consider a valid pitch
#define BIT_RESOLUTION            12  // for 4096 levels of dac precision to start from
#define EXT_MPC4725_1           0x60  // 0x62 will use default CS address for MPC4725


unsigned int samplingPeriod;
unsigned long currentTime;

// These are the input and output vectors to receive computed results from FFT
float vReal[SAMPLES];
float vImag[SAMPLES];
int controlSignal  = 0;

// Create FFT object with weighing factor storage
ArduinoFFT<float> FFT = ArduinoFFT<float>(vReal, vImag, SAMPLES, SAMPLING_FREQUENCY, true);
Adafruit_MCP4725 dac;
// ESP32S3 (44pin) <-> MCP4725
// pin: 4              SDA
// pin: 5              SCL
// pin: 3.3v           VCC 
// pin: GND            GND
// pin: 1 - analog input -> to guitar preamp
// 1117C pin: 4.65v to PreAmp
void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);
  //
  if (!dac.begin(EXT_MPC4725_1)) {
    Serial.println("Failed to locate dac: MPC4725");
    while(1);
  }
 
  samplingPeriod = round(1000000*(1.0/SAMPLING_FREQUENCY));
  analogReadResolution(BIT_RESOLUTION); // 12-bit resolution
}

void loop() {
  currentTime = micros(); 
  for (int i = 0; i < SAMPLES; i++) {
    vReal[i] = analogRead(PIN_AUDIO_IN);                   // A conversion takes about 1uS on an ESP32
    vImag[i] = 0;
    while (micros() - currentTime < samplingPeriod) {}      // wait time
    currentTime += samplingPeriod;
  }
  FFT.dcRemoval();
  FFT.windowing(FFTWindow::Hamming, FFTDirection::Forward);	// Weigh data
  FFT.compute(FFTDirection::Forward);                       // Compute FFT
  FFT.complexToMagnitude();                                 // Compute magnitudes
  float pitchFrequency = FFT.majorPeak(); 
 
  // Find max aplitude for current samples
  double maxAmplitute = 0;
  for (int i=0; i < SAMPLES/2; i++) {
     if (vReal[i] > maxAmplitute) { maxAmplitute = vReal[i]; } // track the higheest value
  }

  // Filter only values over threshold
  if (maxAmplitute > AMPLITUDE_THRESHOLD) {
    controlSignal = map(pitchFrequency, 20, SAMPLING_FREQUENCY/2, 0, 4096); // Adjust ranges as needed
    Serial.println("Pitch Frequency: " + String(pitchFrequency) + " mapped: " + String(controlSignal));
    // output to FV-1 POT0
    dac.setVoltage(controlSignal, false);
    // for stability
    delay(10);
  }
}
