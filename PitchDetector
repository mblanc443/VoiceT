// Detect guitar chord pitch and amplitude
#include <arduinoFFT.h>

#define CHANNEL              A0 // Analog Input
#define SAMPLES             256 // Has to be a square of 2
#define SAMPLING_FREQUENCY 5000 // Hz
#define AMPLITUDE_THRESHOLD  50 // Minimum amplitude to consider a valid pitch
#define BIT_RESOLUTION       12 // 

unsigned int samplingPeriodUs;
unsigned long microseconds;

// These are the input and output vectors
// Input vectors receive computed results from FFT
double vReal[SAMPLES];
double vImag[SAMPLES];

float pitchFrequency = 0; // int
int controlSignal = 0;

// Create FFT object with weighing factor storage
ArduinoFFT<double> FFT = ArduinoFFT<double>(vReal, vImag, SAMPLES, SAMPLING_FREQUENCY);

void setup() {
  Serial.begin(115200);
  samplingPeriodUs = round(1000000 * (1.0 / SAMPLING_FREQUENCY));
  analogReadResolution(BIT_RESOLUTION); // 12-bit resolution
}

void loop() {
  // SAMPLING
  microseconds = micros();
  
  for (int i = 0; i < SAMPLES; i++) {
    if (i == 0) {
      vReal[i] = analogRead(CHANNEL); // Read from ADC pin A0 //34 (change as needed)
    } else {
      delayMicroseconds(samplingPeriodUs - (micros() - microseconds));
      vReal[i] = analogRead(CHANNEL);
    }
    vImag[i] = 0; // Imaginary part must be zeroed
  }

  FFT.windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD); //FFT.windowing(FFTWindow::Hamming, FFTDirection::Forward);	/* Weigh data */
  FFT.compute(vReal, vImag, SAMPLES, FFT_FORWARD); // FFT.compute(FFTDirection::Forward); /* Compute FFT */
  FFT.complexToMagnitude(vReal, vImag, SAMPLES);   // FFT.complexToMagnitude(); /* Compute magnitudes */
  
  pitchFrequency = FFT.majorPeak(); //.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY); // float x = FFT.majorPeak();
  
  if (pitchFrequency > AMPLITUDE_THRESHOLD) {
    controlSignal = map(pitchFrequency, 80, 1000, 0, 255); // Adjust ranges as needed
    Serial.println("Pitch Frequency: " + String(pitchFrequency) + " Control Signal [Hz]: " + String(controlSignal));
  }
}
